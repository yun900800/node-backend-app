name: Deploy Node.js Project to Serv00

on:
  push:
    branches:
      - master 

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: 1. Checkout code on Runner
        uses: actions/checkout@v4

      - name: 2. Install dev dependencies and Run Build/Generate
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - run: |
          npm install
          npx prisma generate
        env:
          POSTGRES_PRISMA_URL: ${{ secrets.POSTGRES_PRISMA_URL }}

      - name: 3. Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0 
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
          
      - name: 4. Deploy Code & Sync (using Rsync)
        run: |
          REMOTE_DIR="/home/${{ secrets.DEPLOY_USER }}/app/node-backend-api/"
          HOST=${{ secrets.DEPLOY_HOST }}
          USER=${{ secrets.DEPLOY_USER }}
          SSH_OPTIONS="-o StrictHostKeyChecking=no -p 22"
          echo "-> 正在创建远程目录（如果不存在）..."
          ssh ${SSH_OPTIONS} ${USER}@${HOST} "mkdir -p ${REMOTE_DIR}"
          echo "-> 开始使用 rsync 同步文件..."
          rsync -rltDvz --exclude 'node_modules' --exclude '.git' -e "ssh ${SSH_OPTIONS}" ./ ${USER}@${HOST}:${REMOTE_DIR}
          echo "-> 文件同步完成。"

      - name: 5. Restart Node.js Service & Run Migrations
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          port: 22
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          env:
            POSTGRES_PRISMA_URL: ${{ secrets.POSTGRES_PRISMA_URL }}
            POSTGRES_URL_NON_POOLING: ${{ secrets.POSTGRES_URL_NON_POOLING }}
            JWT_SECRET: ${{ secrets.JWT_SECRET }}
          script: |
            PROJECT_DIR="/home/${{ secrets.DEPLOY_USER }}/app/node-backend-api"
            MAIN_FILE="server.js"
            APP_NAME="node-backend-api" 
            
            echo "-> 进入项目目录..."
            cd ${PROJECT_DIR}

            echo "-> 重新安装生产依赖..."
            npm install --production 

            echo "-> 正在应用 Prisma 数据库迁移..."
            npx prisma migrate deploy
            
            echo "-> 查找并杀死旧进程..."
            PID=$(ps aux | grep node | grep ${APP_NAME} | grep -v grep | awk '{print $2}')
            
            if [ -n "${PID}" ]; then
                echo "找到旧进程 PID: ${PID}，正在发送 SIGTERM 信号..."
                kill -15 ${PID} || true 
                sleep 5 
                
                if ps -p ${PID} > /dev/null; then
                    echo "进程未终止，强制杀死 (SIGKILL)..."
                    kill -9 ${PID}
                else
                    echo "旧进程已安全终止。"
                fi
            else
                echo "未找到正在运行的旧进程。"
            fi

            echo "-> 启动新的 Node.js 进程..."
            export POSTGRES_PRISMA_URL=$POSTGRES_PRISMA_URL
            export POSTGRES_URL_NON_POOLING=$POSTGRES_URL_NON_POOLING
            export JWT_SECRET=$JWT_SECRET

            nohup node ${MAIN_FILE} --name ${APP_NAME} > /dev/null 2>&1 &
            
            NEW_PID=$!
            echo "-> Node.js 服务已启动，新的 PID: ${NEW_PID}"
            echo "-> 部署完成。"
