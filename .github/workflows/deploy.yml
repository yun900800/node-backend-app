# name: Deploy Node.js Project to Webhost

# on:
#   push:
#     branches:
#       - master # 只有推送到 master 分支时触发

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
    
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Deploy via SSH (Code Update Only)
#         # 使用 appleboy/ssh-action 确保在主机上执行命令
#         uses: appleboy/ssh-action@v1.0.0
#         with:
#           # SSH 连接信息，从 GitHub Secrets 中读取
#           host: ${{ secrets.DEPLOY_HOST }}
#           username: ${{ secrets.DEPLOY_USER }}
#           key: ${{ secrets.DEPLOY_SSH_KEY }}
#           port: 22
          
#           # 部署脚本，注意这里是多行脚本的 YAML 格式
#           script: |
#             # =========================================================
#             # 1. 变量配置 - 请确保这些路径正确！
#             # =========================================================
#             NPM_BIN="/opt/alt/alt-nodejs20/root/bin/npm"
#             NODE_BIN="/opt/alt/alt-nodejs20/root/bin/node"
#             PROJECT_DIR="/home/${{ secrets.DEPLOY_USER }}/app"
#             MAIN_FILE="server.js"
            
#             # =========================================================
#             # 2. 停止旧进程 (为 Cron Job 启动新代码做准备)
#             # =========================================================
#             echo "-> 尝试停止旧的 Node 进程..."
#             # pkill -f 通过匹配整个命令行参数来终止旧进程
#             # || true 确保即使没有找到进程也不会报错
#             /usr/bin/pkill -f "${PROJECT_DIR}/${MAIN_FILE}" || true 

#             # =========================================================
#             # 3. 更新代码和安装依赖
#             # =========================================================
#             echo "-> 进入项目目录..."
#             cd ${PROJECT_DIR}
            
#             echo "-> 拉取最新代码..."
#             git pull origin master
            
#             echo "-> 安装依赖..."
#             ${NPM_BIN} install --production 
            
#             echo "-> 代码部署完成。进程将由 Cron Job 启动/重启。"

name: Deploy Node.js Project to Serv00

on:
  push:
    branches:
      - master 

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: 1. Checkout code on Runner
        uses: actions/checkout@v4

      - name: 2. Install dependencies on Runner
        uses: actions/setup-node@v4
        with:
          node-version: '18'
        - run: npm install --production
        
      # -------------------------------------------------------------
      - name: 3. Deploy Code (使用纯 Rsync 绕开 tar 错误)
        # ⚠️ 注意：我们使用 appleboy/ssh-action 来执行本地 rsync 命令，
        # 而不是使用 scp-action。
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: 22
          
          # 这个关键步骤在 GitHub Runner (Ubuntu) 上执行 rsync 命令：
          # rsync -rltDvzP -e "ssh -p 22" ./ /home/USER/app/node-backend-api/
          # 它会通过 SSH 隧道，将本地文件直接同步到远程 Serv00 服务器。
          script: |
            REMOTE_DIR="/home/${{ secrets.DEPLOY_USER }}/app/node-backend-api/"
            
            echo "-> 正在创建远程目录（如果不存在）..."
            # 确保目标目录在 Serv00 服务器上存在
            ssh -p 22 ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "mkdir -p ${REMOTE_DIR}"
            
            echo "-> 开始使用 rsync 同步文件..."
            # 使用 rsync 纯净地同步文件，不会涉及到 scp-action 内部不兼容的 tar 逻辑
            # -rltDvz 是标准的 rsync 选项，-e "ssh -p 22" 指定了通过哪个端口的 SSH 连接
            rsync -rltDvz --delete -e "ssh -p 22 -i /home/runner/.ssh/id_rsa" ./ ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${REMOTE_DIR}
            
            echo "-> 文件同步完成。"

      # -------------------------------------------------------------
      - name: 4. Restart Node.js Service (SSH - 进程管理)
        # 这一步保持不变，继续使用 appleboy/ssh-action 执行远程命令
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: 22
          script: |
            PROJECT_DIR="/home/${{ secrets.DEPLOY_USER }}/app/node-backend-api"
            MAIN_FILE="server.js"
            
            echo "-> 进入项目目录..."
            cd ${PROJECT_DIR}
            
            echo "-> 重启/启动 Node.js 进程..."
            pm2 restart ${MAIN_FILE} || pm2 start ${MAIN_FILE} --name node-backend-api
            echo "-> 部署完成。"