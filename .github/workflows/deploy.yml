name: Deploy Node.js Project to Serv00

on:
  push:
    branches:
      - master 

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: 1. Checkout code on Runner
        uses: actions/checkout@v4

      - name: 2. Install dependencies on Runner
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - run: npm install --production
        
      # -------------------------------------------------------------
      # 🎯 步骤 3：加载私钥到 ssh-agent
      - name: 3. Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          # 加载您的私钥
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
          
      # -------------------------------------------------------------
      # 🎯 步骤 4：Deploy Code (使用纯 Rsync)
      - name: 4. Deploy Code & Sync
        # 使用标准的 run 步骤，它会自动继承 ssh-agent 的配置
        run: |
          REMOTE_DIR="/home/${{ secrets.DEPLOY_USER }}/app/node-backend-api/"
          HOST=${{ secrets.DEPLOY_HOST }}
          USER=${{ secrets.DEPLOY_USER }}

          # 统一的 SSH 选项：-o StrictHostKeyChecking=no 解决主机验证失败
          SSH_OPTIONS="-o StrictHostKeyChecking=no -p 22"

          echo "-> 正在创建远程目录（如果不存在）..."
          # 1. 确保目录存在：ssh 命令将通过 ssh-agent 认证
          ssh ${SSH_OPTIONS} ${USER}@${HOST} "mkdir -p ${REMOTE_DIR}"
          
          echo "-> 开始使用 rsync 同步文件..."
          # 2. rsync 传输：通过 -e 参数和 ssh-agent 认证
          rsync -rltDvz --delete -e "ssh ${SSH_OPTIONS}" ./ ${USER}@${HOST}:${REMOTE_DIR}
          
          echo "-> 文件同步完成。"

      - name: 5. Restart Node.js Service
        uses: appleboy/ssh-action@v1.0.0
        with:
          # ... (省略 host/username/port/key)
          script: |
            PROJECT_DIR="/home/${{ secrets.DEPLOY_USER }}/app/node-backend-api"
            MAIN_FILE="server.js"
            APP_NAME="node-backend-api" 
            
            LOG_FILE="${PROJECT_DIR}/app.log" 

            echo "-> 进入项目目录..."
            cd ${PROJECT_DIR}

            echo "-> 查找并杀死旧进程..."
            
            # 【✅ 查找逻辑修改】：基于项目目录精确匹配
            PID=$(ps aux | grep "node" | grep "${PROJECT_DIR}" | grep -v grep | awk '{print $2}')
            
            if [ -z "${PID}" ]; then
                echo "未找到正在运行的旧进程。"
            else
                echo "找到旧进程 PID: ${PID}，正在发送 SIGTERM 信号..."
                kill -15 ${PID}
                sleep 5 
                
                if ps -p ${PID} > /dev/null; then
                    echo "进程未终止，强制杀死 (SIGKILL)..." 
                    kill -9 ${PID}
                else
                    echo "旧进程已安全终止。"
                fi
            fi

            echo "-> 启动新的 Node.js 进程，并设置生产环境..."
            
            # 【✅ 启动命令修改】：添加 NODE_ENV=production 并移除 --name
            nohup NODE_ENV=production node ${MAIN_FILE} > ${LOG_FILE} 2>&1 &
            
            NEW_PID=$!
            echo "-> Node.js 服务已启动，新的 PID: ${NEW_PID}"
            echo "-> 日志文件路径: ${LOG_FILE}"
            echo "-> 部署完成。"
