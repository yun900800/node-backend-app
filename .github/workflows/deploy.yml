# name: Deploy Node.js Project to Webhost

# on:
#   push:
#     branches:
#       - master # 只有推送到 master 分支时触发

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
    
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Deploy via SSH (Code Update Only)
#         # 使用 appleboy/ssh-action 确保在主机上执行命令
#         uses: appleboy/ssh-action@v1.0.0
#         with:
#           # SSH 连接信息，从 GitHub Secrets 中读取
#           host: ${{ secrets.DEPLOY_HOST }}
#           username: ${{ secrets.DEPLOY_USER }}
#           key: ${{ secrets.DEPLOY_SSH_KEY }}
#           port: 22
          
#           # 部署脚本，注意这里是多行脚本的 YAML 格式
#           script: |
#             # =========================================================
#             # 1. 变量配置 - 请确保这些路径正确！
#             # =========================================================
#             NPM_BIN="/opt/alt/alt-nodejs20/root/bin/npm"
#             NODE_BIN="/opt/alt/alt-nodejs20/root/bin/node"
#             PROJECT_DIR="/home/${{ secrets.DEPLOY_USER }}/app"
#             MAIN_FILE="server.js"
            
#             # =========================================================
#             # 2. 停止旧进程 (为 Cron Job 启动新代码做准备)
#             # =========================================================
#             echo "-> 尝试停止旧的 Node 进程..."
#             # pkill -f 通过匹配整个命令行参数来终止旧进程
#             # || true 确保即使没有找到进程也不会报错
#             /usr/bin/pkill -f "${PROJECT_DIR}/${MAIN_FILE}" || true 

#             # =========================================================
#             # 3. 更新代码和安装依赖
#             # =========================================================
#             echo "-> 进入项目目录..."
#             cd ${PROJECT_DIR}
            
#             echo "-> 拉取最新代码..."
#             git pull origin master
            
#             echo "-> 安装依赖..."
#             ${NPM_BIN} install --production 
            
#             echo "-> 代码部署完成。进程将由 Cron Job 启动/重启。"

name: Deploy Node.js Project to Serv00

on:
  push:
    branches:
      - master 

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: 1. Checkout code on Runner
        uses: actions/checkout@v4

      - name: 2. Install dependencies on Runner
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - run: npm install --production
        
      # -------------------------------------------------------------
      # 🎯 新增步骤 3：加载私钥到 ssh-agent
      # 使用专门的 Action 保证密钥被正确识别和加载
      - name: 3. Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0 # 这是一个更稳定、专用于 ssh-agent 的 Action
        with:
          # 加载您的私钥，没有密语时也适用
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
          
      # -------------------------------------------------------------
      # 🎯 新增步骤 4：Deploy Code (使用纯 Rsync)
      - name: 4. Deploy Code & Sync
        # 使用标准的 run 步骤，它会自动继承 ssh-agent 的配置
        run: |
          REMOTE_DIR="/home/${{ secrets.DEPLOY_USER }}/app/node-backend-api/"
          HOST=${{ secrets.DEPLOY_HOST }}
          USER=${{ secrets.DEPLOY_USER }}

          # 统一的 SSH 选项：-o StrictHostKeyChecking=no 解决主机验证失败
          SSH_OPTIONS="-o StrictHostKeyChecking=no -p 22"

          echo "-> 正在创建远程目录（如果不存在）..."
          # 1. 确保目录存在：ssh 命令将通过 ssh-agent 认证
          ssh ${SSH_OPTIONS} ${USER}@${HOST} "mkdir -p ${REMOTE_DIR}"
          
          echo "-> 开始使用 rsync 同步文件..."
          # 2. rsync 传输：通过 -e 参数和 ssh-agent 认证
          rsync -rltDvz --delete -e "ssh ${SSH_OPTIONS}" ./ ${USER}@${HOST}:${REMOTE_DIR}
          
          echo "-> 文件同步完成。"

      # -------------------------------------------------------------
      # 🎯 新增步骤 5：Restart Node.js Service (SSH - 进程管理)
      - name: 5. Restart Node.js Service
        # 使用 appleboy/ssh-action 确保远程命令执行，它将使用 ssh-agent 认证
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          # 关键：这里不再需要 key: 字段，因为它会使用 ssh-agent 认证
          port: 22
          script_options: "-o StrictHostKeyChecking=no" # 解决这一步的主机验证问题
          script: |
            PROJECT_DIR="/home/${{ secrets.DEPLOY_USER }}/app/node-backend-api"
            MAIN_FILE="server.js"
            
            echo "-> 进入项目目录..."
            cd ${PROJECT_DIR}
            
            echo "-> 重启/启动 Node.js 进程..."
            pm2 restart ${MAIN_FILE} || pm2 start ${MAIN_FILE} --name node-backend-api
            echo "-> 部署完成。"