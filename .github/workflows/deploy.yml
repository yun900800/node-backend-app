name: Deploy Node.js Project to FreeBSD

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ 拉取代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ 设置 SSH Agent
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      # 3️⃣ 打包项目源代码（不包含 node_modules）
      - name: Package project
        run: |
          tar czf node-backend-api.tar.gz \
            package.json package-lock.json server.js prisma features src config middleware shared

      # 4️⃣ 传输并解压到 FreeBSD
      - name: Transfer & Extract on FreeBSD
        run: |
          HOST=${{ secrets.DEPLOY_HOST }}
          USER=${{ secrets.DEPLOY_USER }}
          REMOTE_DIR="/home/${USER}/app/node-backend-api"

          echo "-> 创建远程目录..."
          ssh -o StrictHostKeyChecking=no -p 22 ${USER}@${HOST} "mkdir -p ${REMOTE_DIR}"

          echo "-> 传输压缩包..."
          scp -P 22 node-backend-api.tar.gz ${USER}@${HOST}:${REMOTE_DIR}/

          echo "-> 解压项目..."
          ssh -o StrictHostKeyChecking=no -p 22 ${USER}@${HOST} \
            "cd ${REMOTE_DIR} && tar xzf node-backend-api.tar.gz && rm node-backend-api.tar.gz"

      # 5️⃣ 安装依赖 & 生成 Prisma WASM Client 在 FreeBSD
      - name: Install dependencies & Generate Prisma Client
        run: |
          HOST=${{ secrets.DEPLOY_HOST }}
          USER=${{ secrets.DEPLOY_USER }}
          REMOTE_DIR="/home/${USER}/app/node-backend-api"

          ssh -o StrictHostKeyChecking=no -p 22 ${USER}@${HOST} << 'EOF'
            set -e

            echo "-> 进入项目目录..."
            cd ${REMOTE_DIR}

            echo "-> 安装生产依赖..."
            npm ci --omit=dev

            echo "-> 生成 Prisma WASM Client..."
            npx prisma generate --schema=prisma/schema.prisma

      # 6️⃣ 重启 Node.js 服务
      - name: Restart Node.js Service on FreeBSD
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          port: 22
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          envs: POSTGRES_PRISMA_URL,POSTGRES_URL_NON_POOLING,JWT_SECRET
          script: |
            PROJECT_DIR="/home/${{ secrets.DEPLOY_USER }}/app/node-backend-api"
            MAIN_FILE="server.js"
            APP_NAME="node-backend-api"
            LOG_FILE="/tmp/${APP_NAME}.log"

            echo "-> 进入项目目录..."
            cd ${PROJECT_DIR}

            echo "-> 杀死旧进程..."
            PID=$(ps aux | grep node | grep ${APP_NAME} | grep -v grep | awk '{print $2}')
            if [ -n "${PID}" ]; then
              kill -15 ${PID} || true
              sleep 5
              ps -p ${PID} && kill -9 ${PID} || echo "旧进程已终止."
            fi

            echo "-> 启动新的 Node.js 服务..."
            export POSTGRES_PRISMA_URL=$POSTGRES_PRISMA_URL
            export POSTGRES_URL_NON_POOLING=$POSTGRES_URL_NON_POOLING
            export JWT_SECRET=$JWT_SECRET

            nohup node ${MAIN_FILE} > ${LOG_FILE} 2>&1 &

            echo "-> Node.js 服务已启动. 日志: ${LOG_FILE}"
